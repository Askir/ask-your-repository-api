import os
from dotenv import load_dotenv

BASEDIR = os.path.abspath(os.path.dirname(__file__)) + '/..'
use_compose = os.getenv('USE_COMPOSE_ENV', 'FALSE')
if use_compose == 'TRUE':
    load_dotenv(dotenv_path=os.path.join(BASEDIR, '.env.dc.testing'), override=True)
else:
    load_dotenv(dotenv_path=os.path.join(BASEDIR, '.env.testing'), override=False)
ELASTICSEARCH_URL = os.getenv('ES_URL', 'localhost:9200')
NEO4J_URL = os.getenv('NEO4J_URL', 'bolt://localhost:17687')
FILE_SERVER = os.getenv('FILE_SERVER', 'localhost')
UPLOAD_FOLDER = os.getenv('UPLOAD_FOLDER', 'localhost')
CLOUD_VISION_API_URL = os.getenv('CLOUD_VISION_API_URL')
CLOUD_VISION_API_KEY = os.getenv('CLOUD_VISION_API_KEY')

TESTING = True

ES_SYNC = False

CLIENT_ID = os.getenv('CLIENT_ID')

JWT_TOKEN_LOCATION = ['cookies']
JWT_ACCESS_COOKIE_PATH = '/'

# Only allow JWT cookies to be sent over https. In production, this
# should likely be True
JWT_COOKIE_SECURE = False

# Enable csrf double submit protection. See this for a thorough
# explanation: http://www.redotheweb.com/2015/11/09/api-security.html
JWT_COOKIE_CSRF_PROTECT = True
JWT_CSRF_METHODS = ['GET', 'POST', 'PUT', 'PATCH', 'DELETE']

# Send token to client in response instead of saving it in a cookie
JWT_CSRF_IN_COOKIES = False

# Cookie domain has to be set in development
#JWT_COOKIE_DOMAIN = None

JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY')
